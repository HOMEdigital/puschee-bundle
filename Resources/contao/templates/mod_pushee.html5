<?php
    $pc = $this->pusheeConfig;
?>
<!-- The core Firebase JS SDK is always required and must be listed first -->
<!--<script src="/bundles/homepushee/firebase/7.16.1/firebase-app.js"></script>
<script src="/bundles/homepushee/firebase/7.16.1/firebase-messaging.js"></script>-->
<script src="https://www.gstatic.com/firebasejs/7.16.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/7.16.1/firebase-messaging.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        try {
            // Your web app's Firebase configuration
            let firebaseConfig = {
                apiKey: "<?=$pc['apiKey']?>",
                authDomain: "<?=$pc['authDomain']?>",
                databaseURL: "<?=$pc['databaseURL']?>",
                projectId: "<?=$pc['projectId']?>",
                storageBucket: "<?=$pc['storageBucket']?>",
                messagingSenderId: "<?=$pc['messagingSenderId']?>",
                appId: "<?=$pc['appId']?>",
                measurementId: "<?=$pc['measurementId']?>"
            };
            // Initialize Firebase
            firebase.initializeApp(firebaseConfig);
            const messaging = firebase.messaging();

            // Init service worker
            /* not working, fcm still wants to load firebase-messaging-sw.js
            if('serviceWorker' in navigator){
                navigator.serviceWorker.register('<?php // echo $pc['projectId']?>-sw.js').then(
                    registration => {
                        messaging.useServiceWorker(registration);
                        console.log('service worker registerd');
                    }
                ).catch(err => console.log('Service Worker Error', err))
            }else{
                console.log('Service Worker not supported');
            }*/

            // Get Instance ID token. Initially this makes a network call, once retrieved
            // subsequent calls to getToken will return from cache.
            messaging.getToken().then((currentToken) => {
                if (currentToken) {
                    //console.log('token',currentToken);
                    sendTokenToServer(currentToken);
                    //updateUIForPushEnabled(currentToken);

                } else {
                    // Show permission request.
                    console.log('No Instance ID token available. Request permission to generate one.');
                    // Show permission UI.
                    //updateUIForPushPermissionRequired();
                    //setTokenSentToServer(false);
                }
            }).catch((err) => {
                console.log('An error occurred while retrieving token. ', err);
                //showToken('Error retrieving Instance ID token. ', err);
                //setTokenSentToServer(false);
            });

            // Callback fired if Instance ID token is updated.
            messaging.onTokenRefresh(() => {
                messaging.getToken().then((refreshedToken) => {
                    console.log('Token refreshed.',refreshedToken);
                    // Indicate that the new Instance ID token has not yet been sent to the
                    // app server.
                    //setTokenSentToServer(false);
                    // Send Instance ID token to app server.
                    sendTokenToServer(refreshedToken);
                    // ...
                }).catch((err) => {
                    console.log('Unable to retrieve refreshed token ', err);
                    //showToken('Unable to retrieve refreshed token ', err);
                });
            });

            // Handle incoming messages. Called when:
            // - a message is received while the app has focus
            // - the user clicks on an app notification created by a service worker
            //   `messaging.setBackgroundMessageHandler` handler.
            messaging.onMessage((payload) => {
                if(payload.hasOwnProperty('notification')){
                    // Show message in snackbar
                    let title = payload.notification.title;
                    let body = payload.notification.body;
                    let href = payload.notification.clickAction;
                    // Get the snackbar DIV
                    let snackbar = document.getElementById("snackbar");

                    // Add message to snackbar
                    snackbar.innerHTML = '<a href="' + href + '"><h3>' + title + '</h3><p>' + body + '</p></a>';

                    // Add the "show" class to DIV
                    snackbar.className = "show";

                    // After 3 seconds, remove the show class from DIV
                    setTimeout(function(){ snackbar.className = snackbar.className.replace("show", ""); }, 5000);

                }
            });

            // Send token to backend
            function sendTokenToServer(token){
                let data = {token:token};

                $.ajax({
                    type: "POST",
                    url: `/pushee/addToken`,
                    data: data,
                    dataType: "application/json"
                }).always (function (data) {
                    //console.log('data',data);
                });
            }
        }catch (e) {
            console.error(e);
        }
    })
</script>
<!-- The actual snackbar -->
<div id="snackbar">Some text some message..</div>
